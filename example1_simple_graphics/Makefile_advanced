# Compiler to use
CC = gcc

# Compiler flags
# -Wall        enable all warning messages
# -Wextra      enable extra warnings
# -g           include debugging information
CFLAGS = -Wall -Wextra -g

# Target executable name
TARGET = circle

# Source files
SRCS = circle.c random.c other.c

# Object files
OBJS = $(SRCS:.c=.o)

# Linker flags
LDFLAGS = -lGL -lGLU -lglut -lm

# Default rule to build the target
all: $(TARGET)

# Rule to build the final executable
# This rule says: To build the target, we need the object files
# Then it links those object files together using the compiler and linker flags
$(TARGET): $(OBJS)
	$(CC) $(OBJS) -o $(TARGET) $(LDFLAGS)

# Pattern rule for creating object files
# If we have multiple .c files, for each .c file, create a corresponding .o file
# The .o file is created by compiling the source, which is then linked
# $< represents the first prerequisite (the .c file)
# $@ represents the target (the .o file)
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# Clean up rule - removes all generated files
# This allows you to start fresh with "make clean"
# rm -f means remove files without prompting and don't error if files don't exist
clean:
	rm -f $(TARGET) $(OBJS)